# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18gK5CLfYvBRgTbqhx3qIaTqKvO0Qlofr
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

diabetes=pd.read_csv('/content/diabetes.csv')

diabetes.head()

diabetes.tail()

"""#how row and columns in the dataset

"""

diabetes.shape
diabetes.describe()

diabetes['Outcome'].value_counts()

diabetes.groupby('Outcome').mean()

x=diabetes.drop(columns='Outcome',axis=1)
y=diabetes['Outcome']
print(x)
print(y)

# Commented out IPython magic to ensure Python compatibility.
#construct heat map
# %matplotlib inline
import matplotlib.pyplot as plt
correlation=diabetes.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues')

import matplotlib.pyplot as plt
import numpy as np
x=np.linspace(0,2*np.pi,100)
y=np.sin(x)
z=np.cos(x)
print(x)
print(y)
plt.plot(x,y)
plt.show()

scaler=StandardScaler()

scaler=StandardScaler()
StandardScaler=scaler.fit(x) # Reshape x to a 2D array with one column

standardscaler = scaler.transform(x) # Reshape x before transforming

x=standardscaler
y=diabetes['Outcome']
print(x)
print(y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=2)


print(x.shape, x_train.shape, x_test.shape)

Classifier= svm.SVC(kernel='linear')

Classifier.fit(x_train,y_train)

x_train_prediction=Classifier.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

x_test_prediction=Classifier.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)
print('Accuracy score of the testing data : ', test_data_accuracy)

input_ds=(3,126,88,41,235,39.3,0.704,27)
np_array=np.asarray(input_ds)
input_data_reshape=np_array.reshape(1,-1)
std_data=scaler.transform(input_data_reshape)
print(std_data)
predicition=Classifier.predict(std_data)
print(predicition)
if(predicition[0]==0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')